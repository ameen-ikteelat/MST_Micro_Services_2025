// Using Recursion: time O(2^n), space O(n)
public class Solution {
    public int minCostClimbingStairs(int[] cost) {
        
        return Math.min(dfs(cost, 0), dfs(cost, 1));
    }
    
    private int dfs(int[] cost, int i) {
        if (i >= cost.length) {
            return 0;
        }
        return cost[i] + Math.min(dfs(cost, i + 1),
                                  dfs(cost, i + 2));
    }
}

// Dynamic Programming (Top-Down): time O(n), space O(n)
public class Solution {
    int[] memo;
    
    public int minCostClimbingStairs(int[] cost) {
        memo = new int[cost.length];
        Arrays.fill(memo, -1);
        return Math.min(dfs(cost, 0), dfs(cost, 1));
    }
    
    private int dfs(int[] cost, int i) {
        if (i >= cost.length) {
            return 0;
        }
        if (memo[i] != -1) {
            return memo[i];
        }
        memo[i] = cost[i] + Math.min(dfs(cost, i + 1),
                                     dfs(cost, i + 2));
        return memo[i];
    }
}

// Dynamic Programming (Bottom-Up): time O(n), space O(n)
public class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int[] dp = new int[n + 1];
        
        for (int i = 2; i <= n; i++) {
            dp[i] = Math.min(dp[i - 1] + cost[i - 1],
                             dp[i - 2] + cost[i - 2]);
        }
        
        return dp[n];
    }
}


// Optimal solution: time O(n), space O(1)
public class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int first = 0;  // Represents dp[i-2]
        int second = 0; // Represents dp[i-1]
        
        for (int i = 2; i <= cost.length; i++) {
            int current = Math.min(first + cost[i - 2], second + cost[i - 1]);
            first = second;
            second = current;
        }
        
        return second;
    }
    
    // You can add a main method to test the solution.
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] cost = {10, 15, 20};
        System.out.println(solution.minCostClimbingStairs(cost));  // Expected output: 15
    }
}

